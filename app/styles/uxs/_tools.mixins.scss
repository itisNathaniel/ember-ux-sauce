@mixin pseudo($display: block, $position: absolute, $content: '') {
  content : $content;
  display : $display;
  position: $position;
}

@mixin icon($size:3, $color:$c-dark) {
  $self             : '.uxs-icon';
  //
  align-items       : center;
  cursor            : pointer;
  display           : flex;
  justify-content   : center;
  position          : relative;
  -webkit-appearance: none;
  height            : rs($size);
  width             : rs($size);

  &::before {
    border-radius: rs($size);
  }

  // Disabled Basics
  &--disabled,
  &:disabled {
    cursor: not-allowed;

    &::before {
      display: none;
    }
  }

  svg {
    height : rs($size);
    width  : rs($size);
    z-index: 2;
    fill   : $color;
  }
}

@mixin icon-hover($color: $c-dark) {
  // Hover background
  &::before {
    @include transition-all;
    background: rgba($color,0);
    bottom    : rs(-1);
    content   : '';
    left      : rs(-1);
    position  : absolute;
    right     : rs(-1);
    top       : rs(-1);
    z-index   : 1;
  }

  // Hover State
  &:focus,
  &:hover {
    &::before {
      background: rgba($color,0.1);
    }
  }
}

/*
 * Transitions
 */
@mixin transition-all {
  transition: all $transition-duration $transition-timing-function;
}
@mixin transition ($what) {
  transition: $what $transition-duration $transition-timing-function;
}
@mixin input-placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}
@mixin input-glow {
  outline: none;

  &:focus {
    @content;
  }
}
@mixin input-base {
  @include transition-all;
  @extend .content;
  /* Remove Native Style */
  -webkit-appearance: none;
  -moz-appearance   : none;
  appearance        : none;
  border-width      : 1px;
  border-style      : solid;
  border-radius     : 0;
  display           : block;
  padding           : rem-size(($baseline*.25) - 1px) rem-size(($baseline*.5) - 1px);
  width             : 100%;
  @include input-placeholder() {
    // color: $c-mid;
    color  : inherit;
    opacity: 0.4;
  };
  @include input-glow {
    box-shadow: inset 0 0 rs(0.5) rgba($c-dark, 0.1);
  };
}
@mixin drop-shadow {
  box-shadow: 4px 4px 3px;

  &:hover {
    box-shadow: 4px 4px 6px;
  }
}
@mixin card-shadow ($level, $down:true) {
  $y: -1;
  @if $down == true {
    $y: 1;
  }
  @if $level == 1 {
    box-shadow: 0 1px*$y 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  } @else 
  if $level == 2 {
    box-shadow: 0 3px*$y 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
  } @else 
  if $level == 3 {
    box-shadow: 0 10px*$y 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  } @else 
  if $level == 4 {
    box-shadow: 0 14px*$y 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  } @else 
  if $level == 5 {
    box-shadow: 0 19px*$y 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  }
}
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == min {
      $width: $width + 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
@mixin mq-portrait() {
  @media all and (orientation:portrait) {
    @content;
  }
}
@mixin mq-landscape() {
  @media all and (orientation:landscape) {
    @content;
  }
}
@mixin mq-retina() {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    @content;
  }
}
@mixin align-modifiers {
  &--left {
    text-align: left;
  }

  &--right {
    text-align: right;
  }

  &--center {
    text-align: center;
  }

  &--justify {
    text-align: justify;
  }
}
/**
 * Add text align modifer rules to a component
 */
@mixin text-align-modifiers($colors:$defaultColors, $prefix:'c-') {
  &--al-left {
    text-align: left;
  }

  &--al-right {
    text-align: right;
  }

  &--al-center {
    text-align: center;
  }

  &--al-justify {
    text-align: justify;
  }
}
/**
 * Add text color modifer rules to a component
 */
@mixin text-color-modifiers($colors:$defaultColors, $prefix:'c-') {
  @each $modifier, $color in $colors {
    &--c-#{$prefix}#{$modifier} {
      color: $color;
    }
  }
}
/**
 * Add modifiers to set the background and text color of an element
 */
@mixin style-modifiers($colors:$defaultColors, $opacity:1) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      background-color: rgba($color, $opacity);
      border-color    : contrast-color($color);
      color           : contrast-color($color);
    }
  }
}
@mixin background-color-modifiers($colors:$defaultColors, $opacity:1) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      background-color: rgba($color, $opacity);
      color           : contrast-color($color);
    }
  }
}
@mixin fill-color-modifiers($colors:$defaultColors, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      path {
        fill: $color;
      }
    }
  }
}
@mixin border-color-modifiers($colors:$defaultColors) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      border-color: $color;
    }
  }
}
@mixin contrast-background-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'parent-') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      background-color: contrast-color($color,$dark-color, $light-color);
      color           : contrast-color(contrast-color($color),$dark-color, $light-color);
    }
  }
}
@mixin contrast-border-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      border-color: contrast-color($color, $dark-color, $light-color);
    }
  }
}
@mixin contrast-text-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      color: contrast-color(contrast-color($color, $dark-color, $light-color));
    }
  }
}
@mixin border-color-modifiers($colors:$defaultColors) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      border-color: $color;
    }
  }
}

@mixin type-modifiers($types:$defaultTypeScale, $mod:0) {
  @each $modifier, $type in $types {
    &--ty-#{$modifier} {
      font-size     : map-get($type,size);
      line-height   : map-get($type,height);
      font-weight   : map-get($type,weight);
      letter-spacing: map-get($type,spaceing);
      text-transform: map-get($type,case);
    }
  }
}
@mixin font-size-modifiers($sizes:$defaultSizes, $mod:0) {
  @each $modifier, $size in $sizes {
    &--s-#{$modifier} {
      font-size: rem-size($size - $mod);
    }
  }
}
@mixin line-height-modifiers($line-heights:$defaultLineHights, $mod:0) {
  @each $modifier, $height in $line-heights {
    &--#{$modifier} {
      line-height: rem-size($height - $mod);
    }
  }
}
@mixin font-weight-modifiers($weights:$defaultWeights) {
  @each $modifier, $weight in $weights {
    &--#{$modifier} {
      font-weight: $weight;
    }
  }
}
@mixin text-truncate-modifier($boundary:100%) {
  &--truncate {
    @include text-truncate($boundary);
  }
}
