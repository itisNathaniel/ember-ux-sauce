@mixin pseudo($display: block, $position: absolute, $content: '') {
  content : $content;
  display : $display;
  position: $position;
}

@mixin button-component() {
  @include button;
  @include transition-all;
  @include text-truncate;
  align-items       : center;
  border            : none;
  cursor            : pointer;
  display           : flex;
  flex-direction    : row;
  justify-content   : center;
  // margin            : rs(1);
  padding           : rs(1) rs(2);
  position          : relative;
  height            : rs(5);
  max-width         : 100%;
  min-width         : rs(16);
  -webkit-appearance: none;

  @include mq(tablet) {
    max-width: rs(48);
  }

  /* ################ *
   * Disabled Basics  *
   * ################ */
  &--disabled,
  &:disabled {
    cursor: not-allowed;
  }

  &--loading {
    animation                : opacityPulse 3s ease-out;
    animation-iteration-count: infinite;
    opacity                  : 1;
  }

  /*
   * Disabled
   */
  &--disabled,
  &:disabled {
    color: $c-mid;

    &:focus,
    &:hover {
      background-color: transparent!important;
    }
  }

  /*
   * Radius modifier
   */
  &--square {
    border-radius: 0;
  }

  &--rounded {
    border-radius: rs(.5);
  }

  &--round {
    border-radius: rs(2.5);
  }

  /* ############### *
   * Child Elements  *
   * ############### */

  &__icon {
    @include icon;
    margin-right: rs(1);
    margin-left : rs(-.5);
  }

  &__body {
    position: relative;
  }

  &__text {
    visibility: visible;

    &--loading {
      visibility: hidden;
    }
  }

  &__loading {
    visibility: hidden;
    position  : absolute;
    top       : 0;
    left      : 0;
    right     : 0;

    &--loading {
      visibility: visible;
    }
  }
}

@mixin icon($size:3, $padding:1) {
  $self             : '.uxs-icon';
  //
  align-items       : center;
  cursor            : pointer;
  display           : flex;
  height            : rs($size);
  justify-content   : center;
  padding           : 0 rs($padding);
  position          : relative;
  width             : rs($size+($padding*2));
  -webkit-appearance: none;

  &::before {
    border-radius: rs($size);
  }

  // Disabled Basics
  &--disabled,
  &:disabled {
    cursor: not-allowed;

    &::before {
      display: none;
    }
  }

  svg {
    height : rs($size);
    width  : rs($size);
    z-index: 2;
    fill   : currentColor;
  }
}

@mixin icon-hover($color: $c-dark) {
  // Hover background
  &::before {
    @include transition-all;
    background: rgba($color,0);
    bottom    : rs(-1);
    content   : '';
    left      : 0;
    position  : absolute;
    right     : 0;
    top       : rs(-1);
    z-index   : 1;
  }

  // Hover State
  &:focus,
  &:hover {
    &::before {
      background: rgba($color,0.1);
    }
  }
}

/*
 * Transitions
 */
@mixin transition-all {
  transition: all $transition-duration $transition-timing-function;
}
@mixin transition ($what) {
  transition: $what $transition-duration $transition-timing-function;
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}
@mixin input-glow {
  outline: none;

  &:focus {
    @content;
  }
}

@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == min {
      $width: $width + 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
@mixin mq-portrait() {
  @media all and (orientation:portrait) {
    @content;
  }
}
@mixin mq-landscape() {
  @media all and (orientation:landscape) {
    @content;
  }
}
@mixin mq-retina() {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin align-modifiers {
  &--left {
    text-align: left;
  }

  &--right {
    text-align: right;
  }

  &--center {
    text-align: center;
  }

  &--justify {
    text-align: justify;
  }
}

/**
 * Add text align modifer rules to a component
 */
@mixin text-align-modifiers($colors:$defaultColors, $prefix:'c-') {
  &--al-left {
    text-align: left;
  }

  &--al-right {
    text-align: right;
  }

  &--al-center {
    text-align: center;
  }

  &--al-justify {
    text-align: justify;
  }
}
/**
 * Add text color modifer rules to a component
 */
@mixin text-color-modifiers($colors:$defaultColors, $prefix:'c-') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      color: $color;
    }
  }
}
/**
 * Add text weight modifer rules to a component
 */
@mixin text-weight-modifiers($weights:$defaultWeights, $prefix:'') {
  @each $modifier, $weight in $weights {
    &--#{$prefix}#{$modifier} {
      font-weight: $weight;
    }
  }
}
/**
 * Add text weight modifer rules to a component
 */
@mixin text-scale-modifiers($scales:$defaultTypeScale, $prefix:'') {
  @each $modifier, $scale in $scales {
    &--#{$prefix}#{$modifier} {
      font-size     : map-get($scale, 'size');
      line-height   : map-get($scale, 'height');
      letter-spacing: map-get($scale, 'spacing');
      text-transform: map-get($scale, 'case');
    }
  }
}
/**
 * Add modifiers to set the background and text color of an element
 */
@mixin style-modifiers($colors:$defaultColors, $opacity:1) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      background-color: rgba($color, $opacity);
      border-color    : contrast-color($color);
      color           : contrast-color($color);
    }
  }
}
@mixin background-color-modifiers($colors:$defaultColors, $opacity:1) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      background-color: rgba($color, $opacity);
      color           : contrast-color($color);
    }
  }
}
@mixin fill-color-modifiers($colors:$defaultColors, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      path {
        fill: $color;
      }
    }
  }
}
@mixin border-color-modifiers($colors:$defaultColors) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      border-color: $color;
    }
  }
}
@mixin contrast-background-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'parent-') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      background-color: contrast-color($color,$dark-color, $light-color);
      color           : contrast-color(contrast-color($color),$dark-color, $light-color);
    }
  }
}
@mixin contrast-border-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      border-color: contrast-color($color, $dark-color, $light-color);
    }
  }
}
@mixin contrast-text-color-modifiers($colors:$defaultColors, $dark-color:$c-dark, $light-color:$c-white, $prefix:'') {
  @each $modifier, $color in $colors {
    &--#{$prefix}#{$modifier} {
      color: contrast-color(contrast-color($color, $dark-color, $light-color));
    }
  }
}
@mixin border-color-modifiers($colors:$defaultColors) {
  @each $modifier, $color in $colors {
    &--#{$modifier} {
      border-color: $color;
    }
  }
}

@mixin text-truncate-modifier($boundary:100%) {
  &--truncate {
    @include text-truncate($boundary);
  }
}
