/**
 * strip unit
 * ---
 * Remove the unit from a css string
 * e.g. 16px
 *
 * @param  {string} $number a css unit string
 * @return {number}         number without unit
 */
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
/**
 * rem-size
 * ---
 * Convert pixels into rems
 * e.g. 160px = 10rem
 *
 * @param  {string}   $pixels Pixel amount to convert to rems
 * @return {string}           Rem units
 */
@function rem-size($pixels) {
  $value   : strip-unit($pixels);
  $remValue: ($value/16);
  @return #{$remValue}rem;
}
/**
 * rs
 * ---
 * Take a grid number and convert to equivalent rem size
 * e.g.
 *   baseline = 8px (0.5rem)
 *   rs(4)    = 32px (2rem)
 *
 * Second param can be used to modify size by pixel amount.
 * e.g. to take into account for a 1px top and bottom border
 * you would do:
 *   rs(4, 2) = 30px (1.875rem)
 *
 * @param  {string}   $ratio  Amount of grid items to size to
 * @param  {string}   $mod    Modifier pixel amount (by defult this is subtracted from the returned value)
 * @return {string}
 */
@function rs($ratio, $mod:0) {
  @return rem-size(($ratio*$baseline)-$mod);
}
/**
 * scale
 * ---
 * Scales a base value
 *
 * @param  {string}   $pixels description
 * @return {string}           description
 */
@function scale($base, $multipler, $scale) {
  $value: $base;
  @if ($multipler > 0) {
    @for $var from 1 through $multipler {
      $value: $value*$scale;
    }
  } @else {
    $multipler: $multipler*-1;
    @for $var from 1 through $multipler {
      $value: $value/$scale;
    }
  }
  @return $value;
}
/**
 * shade-light
 * ---
 * Take a color and lighten it by equal intervals
 *
 * @param  {string}   $base-color  css color
 * @param  {int}      $step        amount of steps to lighten
 * @param  {int}      $steps       total number of steps
 * @return {string}                lighter color
 */
@function shade-light($base-color, $step, $steps:5) {
  $luminosity-factor: (100 - lightness($base-color)) / $steps;
  @return lighten($base-color, $luminosity-factor*$step);
}
/**
 * shade-dark
 * ---
 * Take a color and darken it by equal intervals
 *
 * @param  {string}   $base-color  css color
 * @param  {int}      $step        amount of steps to darken
 * @param  {int}      $steps       total number of steps
 * @return {string}                darker color
 */
@function shade-dark($base-color, $step, $steps:5) {
  $luminosity-factor: (lightness($base-color)) / $steps;
  @return darken($base-color, $luminosity-factor*$step);
}
/**
 * Take a color and calulate the best contrast color
 * for it.
 */
@function contrast-color($color, $dark-color:$c-dark, $light-color:$c-white) {
  @if (lightness($color) > $contrast-threshold) {
    @return $dark-color; // Lighter backgorund, return dark color
  } @else {
    @return $light-color; // Darker background, return light color
  }
}